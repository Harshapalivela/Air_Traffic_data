# -*- coding: utf-8 -*-
"""Linear_Regression_and_EDA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JJFEQovxUBkVzfaoa4zKFvv0McqliGwH

# **Objective: Prediction of Adjusted Passenger Count at an Airport Terminal**
## *Dataset Link: https://www.kaggle.com/rohanshetty678/air-traffic-data*

**1. Import necessary libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""**2. Load the dataset**"""

dataset=pd.read_csv('/content/air_traffic_data.csv')
df=dataset

"""**3. Exploratory Data Analysis and Data Preprocessing**"""

# view the first five rows of the dataset.
dataset.head()

# Last five rows 
dataset.tail()

# size of the data.
dataset.shape

# Check for any missing values.
dataset.isnull().sum()

# The columns "Operating Airline IATA Code" and "Published Airline IATA code" contains 54 null values each.
# As we know IATA code is the abbreviation of an Airline, our dataset contains the name of the published and operating airlines , so we need to worry about missing values in the IATA columns.
# We can drop both the IATA code containing columns without any loss of information.
dataset.drop(['Operating Airline IATA Code','Published Airline IATA Code'],axis=1,inplace=True)

dataset

# Checking for any duplicates and remove if any.
dataset.drop_duplicates()

# Montly passenger count.
plt.figure(figsize=(16,4))
sns.barplot(x=dataset['Month'],y=dataset['Adjusted Passenger Count'])

# Yearly Passenger Count.
plt.figure(figsize=(16,4))
sns.barplot(x=dataset['Year'],y=dataset['Adjusted Passenger Count'])

plt.figure(figsize=(16,10))
sns.scatterplot(x=range(0,15007),y=dataset['Adjusted Passenger Count'],hue=dataset['Activity Type Code'])

sns.countplot(x=dataset['GEO Summary'])

plt.figure(figsize=(16,4))
sns.countplot(x=dataset['GEO Region'])

sns.countplot(x=dataset['Price Category Code'])

dataset['Adjusted Passenger Count'].corr(dataset['Passenger Count'])

# As the above two columns are highly correlated , one can be eliminated and we chose 'Passenger Count' to remove as we need to predict the 'Adjusted Passenger count'
dataset.drop(['Passenger Count'],axis=1,inplace=True)
# The 'Activity Period' column data implicitly tells about the year and month , so 'Year' and 'Month' columns can be deleted.
dataset.drop(['Year','Month'],axis=1,inplace=True)

print(dataset[dataset['Activity Type Code']==dataset['Adjusted Activity Type Code']].shape)
print(dataset[dataset['Activity Type Code']=="Thru / Transit"].shape)
print(dataset.shape)

"""*The output of the above cell determines that 'Thru/Transit' in 'Activity Type Code' is same as 'Thru/Transit\*2'.Explicitly the other two categories i.e., enplaned and deplaned are common to both the columns. Hence One among the two can be deleted *"""

'''*The output of the above cell determines that 'Thru/Transit' in 'Activity Type Code' is same as 'Thru/Transit\*2'.
Explicitly the other two categories i.e., enplaned and deplaned are common to both the columns. Hence One among the two can be deleted '''
dataset.drop(['Activity Type Code'],axis=1,inplace=True)

# Data types of each column
dataset.dtypes

# After Cleaning the data , the new dimensions of the data.
dataset.shape

# Statastical Parameters of the numerical data.
dataset.describe()

# The max value of 'Adjusted Passenger Count' is much higher than the 75% quartile value. This evidents outliers in the data.
# Visualize using Boxplots to check for outliers existence.
plt.figure(figsize=(15,5))
sns.boxplot(x='Adjusted Passenger Count',data=dataset,orient='h',color='y')

# Outliers are the data points whose z-score value fails to lie between -3 and 3.Below is the code for finding for outliers
def outlierr(data):
  outliers=[]
  threshold=3
  mean=np.mean(data)
  sd=np.std(data)
  
  for i in data:
    z=(i-mean)/sd
    if(np.abs(z)>threshold):
      outliers.append(i)
  return outliers

outlier=outlierr(dataset['Adjusted Passenger Count'])

outlier

# visualise outliers
x=range(0,322)
y=outlier
sns.scatterplot(x,y)
plt.ylabel('No.of passengers')
plt.title('OUTLIERS')

x=range(1,15008)
y=dataset['Adjusted Passenger Count']
plt.scatter(x,y)
plt.xlabel('No.of examples')
plt.ylabel('No.of passengers')
plt.title('Scatter plot of number of passengers')

plt.figure(figsize=(16,4))
plt.axis([0, 500000, 0, 14000])
plt.hist(dataset['Adjusted Passenger Count'],alpha=0.5)
plt.xlabel('Number of passengers')
plt.ylabel('Number of Airlines')

# View the outliers
d=dataset[dataset['Adjusted Passenger Count']>=min(outlier)]
d

dataset.quantile(1)

# We can notice that most examples in the outliers are from 'United Airlines',let's confirm it by visualising
d[d['Operating Airline']=='United Airlines']

d[d['Operating Airline']!='United Airlines']

"""**Important Insight: All the 322 outliers are from United Airlines. This explicitly tells us that these outliers cannot be treated as anamoly in data. This evidents that United Airlines has abnormally highest capacity**"""

dataset[(dataset['Operating Airline']=='United Airlines') & (dataset['Boarding Area']=='F')]

"""**Though removing this outliers or handling them by converting into new values is not good method to practise,but as we first want to fit this model to LINEAR REGRESSION , we need to get rid of outliers to have better performance**"""

# Finding lower and upper quartiles
l=dataset['Adjusted Passenger Count'].quantile(0.25)
u=dataset['Adjusted Passenger Count'].quantile(0.75)
iqr=u-l
l=l-(1.5*iqr)
u=u+(1.5*iqr)

print(l,u)

dataset['Adjusted Passenger Count'].min()

# Capping of outliers.
for i in range(0,15007):
  if (dataset['Adjusted Passenger Count'][i]>u):
    dataset['Adjusted Passenger Count'][i]=u
    if (dataset['Adjusted Passenger Count'][i]<l):
      dataset['Adjusted Passenger Count'][i]=l

sns.boxplot(x=dataset['Adjusted Passenger Count'])

"""**Converting Categorical Variables to Numeric**"""

dataset

dataset.columns

# Storing independent variables in x and dependent variables in y.
x=dataset.iloc[:,:-1]
y=dataset.iloc[:,-1].values
x

# split the data into training set and test set in 4:1 ratio.
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)

# Converting categorical columns into numerical using label encoding
from sklearn.preprocessing import LabelEncoder
le_GS=LabelEncoder()
le_Price=LabelEncoder()
x_train['GEO Summary']=le_GS.fit_transform(x_train.iloc[:,3])
x_train['Price Category Code']=le_Price.fit_transform(x_train.iloc[:,5])
x_test['GEO Summary']=le_GS.fit_transform(x_test.iloc[:,3])
x_test['Price Category Code']=le_Price.fit_transform(x_test.iloc[:,5])

x_train

# One Hot Encoding
columns=['Operating Airline', 'Published Airline', 'GEO Region', 'Terminal','Boarding Area', 'Adjusted Activity Type Code']

from sklearn.preprocessing import OneHotEncoder
enc = OneHotEncoder(sparse=False)
enc.fit(x_train[columns])

a=enc.transform(x_train[columns])
a

x_train=x_train.values

x_train

b=enc.transform(x_test[columns])
b

x_train=np.concatenate((x_train,a),1)

x_train

pd.DataFrame(x_train).isnull().sum()

x_test=np.concatenate((x_test,b),1)

x_test

x_train=pd.DataFrame(x_train)

x_train

x_train=x_train.drop(columns=[1,2,4,6,7,8],axis=1)

x_test=pd.DataFrame(x_test)

x_test=x_test.drop(columns=[1,2,4,6,7,8],axis=1)

x_test=x_test.values

x_train=x_train.values

from sklearn.linear_model import LinearRegression
reg=LinearRegression()
reg.fit(x_train,y_train)
y_pred=reg.predict(x_test)

y_pred

"""# **Model Performance_Linear Regression**"""

# MSE
from sklearn.metrics import  mean_squared_error
Linear_Regression=mean_squared_error(y_pred,y_test)

# r2_score
from sklearn.metrics import r2_score 
r2_score_Linear_Regressionr=r2_score(y_test, y_pred)