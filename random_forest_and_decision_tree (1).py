# -*- coding: utf-8 -*-
"""Random forest and decision tree

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GgmBL0Dcqrt4Obz0vUNmzKqX6MjSmrSj

**Import necessary libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""**Load the dataset**"""

dataset=pd.read_csv('air_traffic_data.csv')
dataset.columns

"""**3. Exploratory Data Analysis and Data Preprocessing**"""

# view the first five rows of the dataset.
dataset.head()

dataset.drop(['Passenger Count'],axis=1,inplace=True)
dataset.drop(['Year','Month'],axis=1,inplace=True)
dataset.drop(['Operating Airline IATA Code','Published Airline IATA Code'],axis=1,inplace=True)

dataset.drop(['Activity Type Code'],axis=1,inplace=True)

# Storing independent variables in x and dependent variables in y.
x=dataset.iloc[:,:-1]
y=dataset.iloc[:,-1].values
x

# split the data into training set and test set in 4:1 ratio.
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)

# Converting categorical columns into numerical using label encoding
from sklearn.preprocessing import LabelEncoder
le_GS=LabelEncoder()
le_Price=LabelEncoder()
x_train['GEO Summary']=le_GS.fit_transform(x_train.iloc[:,3])
x_train['Price Category Code']=le_Price.fit_transform(x_train.iloc[:,5])
x_test['GEO Summary']=le_GS.fit_transform(x_test.iloc[:,3])
x_test['Price Category Code']=le_Price.fit_transform(x_test.iloc[:,5])

# One Hot Encoding
columns=['Operating Airline', 'Published Airline', 'GEO Region', 'Terminal','Boarding Area', 'Adjusted Activity Type Code']
from sklearn.preprocessing import OneHotEncoder
enc = OneHotEncoder(sparse=False)
enc.fit(x_train[columns])

a=enc.transform(x_train[columns])
a

x_train=x_train.values

b=enc.transform(x_test[columns])
b

x_train=np.concatenate((x_train,a),1)

pd.DataFrame(x_train).isnull().sum()

x_test=np.concatenate((x_test,b),1)

x_test

x_train=pd.DataFrame(x_train)

x_train

x_train=x_train.drop(columns=[1,2,4,6,7,8],axis=1)
x_test=pd.DataFrame(x_test)
x_test=x_test.drop(columns=[1,2,4,6,7,8],axis=1)
x_test=x_test.values
x_train=x_train.values
from sklearn import tree
reg=tree.DecisionTreeRegressor()
reg=reg.fit(x_train,y_train)

#y_pred=reg.predict(x_test)

# RMSE
from sklearn.metrics import  mean_squared_error
DT=mean_squared_error(y_pred,y_test)

DT

from sklearn.metrics import r2_score
r2_score(y_test, y_pred)

x_train

from sklearn.ensemble import RandomForestRegressor
regressor=RandomForestRegressor(n_estimators=10,random_state=0)
regressor.fit(x_train,y_train)
y_pred1=regressor.predict(x_test)

r2_score(y_pred1,y_test)

mean_squared_error(y_pred1,y_test)